/**
 * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com) All Rights Reserved.
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import React, { useState, useEffect } from "react";
import { DiagramEngine, DiagramModel } from "@projectstorm/react-diagrams";
import { CanvasWidget } from "@projectstorm/react-canvas-core";
import {
    autoDistribute,
    calculateEntryNodeHeight,
    createNodesLink,
    createPortNodeLink,
    generateEngine,
    sortItems,
} from "../utils/diagram";
import { DiagramCanvas } from "./DiagramCanvas";
import { NodeModel } from "../utils/types";
import { NodeLinkModel } from "./NodeLink";
import { OverlayLayerModel } from "./OverlayLayer";
import { DiagramContextProvider, DiagramContextState } from "./DiagramContext";
import Controls from "./Controls";
import {
    CDAutomation,
    CDConnection,
    CDFunction,
    CDListener,
    CDModel,
    CDService,
    CDResourceFunction,
} from "@wso2/ballerina-core";
import { EntryNodeModel } from "./nodes/EntryNode";
import { ListenerNodeModel } from "./nodes/ListenerNode";
import { ConnectionNodeModel } from "./nodes/ConnectionNode";

export interface DiagramProps {
    project: CDModel;
    onListenerSelect: (listener: CDListener) => void;
    onServiceSelect: (service: CDService) => void;
    onFunctionSelect: (func: CDFunction | CDResourceFunction) => void;
    onAutomationSelect: (automation: CDAutomation) => void;
    onConnectionSelect: (connection: CDConnection) => void;
    onDeleteComponent: (component: CDListener | CDService | CDAutomation | CDConnection) => void;
}

export function Diagram(props: DiagramProps) {
    const {
        project,
        onListenerSelect,
        onServiceSelect,
        onFunctionSelect,
        onAutomationSelect,
        onConnectionSelect,
        onDeleteComponent,
    } = props;
    const [diagramEngine] = useState<DiagramEngine>(generateEngine());
    const [diagramModel, setDiagramModel] = useState<DiagramModel | null>(null);
    const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());

    useEffect(() => {
        if (diagramEngine) {
            const { nodes, links } = getDiagramData();
            drawDiagram(nodes, links);
            autoDistribute(diagramEngine);
        }
    }, [project, expandedNodes]);

    useEffect(() => {
        const handleResize = () => {
            if (diagramEngine?.getCanvas()?.getBoundingClientRect) {
                diagramEngine.zoomToFitNodes({ margin: 40, maxZoom: 1 });
                diagramEngine.repaintCanvas();
            }
        };

        window.addEventListener("resize", handleResize);
        return () => {
            window.removeEventListener("resize", handleResize);
        };
    }, [diagramEngine, diagramModel]);

    const handleToggleNodeExpansion = (nodeId: string) => {
        setExpandedNodes(prev => {
            const newSet = new Set(prev);
            if (newSet.has(nodeId)) {
                newSet.delete(nodeId);
            } else {
                newSet.add(nodeId);
            }
            return newSet;
        });
    };

    const getDiagramData = () => {
        const nodes: NodeModel[] = [];
        const links: NodeLinkModel[] = [];

        // filtered autogenerated connections
        const filteredConnections = project.connections?.filter((connection) => !connection.symbol?.startsWith("_"));
        // Sort and create connections
        const sortedConnections = sortItems(filteredConnections || []) as CDConnection[];
        sortedConnections.forEach((connection, index) => {
            const node = new ConnectionNodeModel(connection);
            // Set initial Y position for connections
            node.setPosition(0, 100 + index * 100);
            nodes.push(node);
        });

        let startY = 100;

        // Sort services by sortText before creating nodes
        const sortedServices = sortItems(project.services || []) as CDService[];
        sortedServices.forEach((service) => {
            // Calculate height based on visible functions and expansion state
            const totalFunctions = service.remoteFunctions.length + service.resourceFunctions.length;
            const isExpanded = expandedNodes.has(service.uuid);
            const nodeHeight = calculateEntryNodeHeight(totalFunctions, isExpanded);

            // Create entry node with calculated height
            const node = new EntryNodeModel(service, "service");
            node.height = nodeHeight;
            node.setPosition(0, startY);
            nodes.push(node);

            startY += nodeHeight + 16;

            // Determine visible and hidden functions based on expansion state
            const serviceFunctions = [];
            if (service.remoteFunctions?.length > 0) {
                serviceFunctions.push(...service.remoteFunctions);
            }
            if (service.resourceFunctions?.length > 0) {
                serviceFunctions.push(...service.resourceFunctions);
            }

            const isNodeExpanded = expandedNodes.has(service.uuid);

            let visibleFunctions, hiddenFunctions;
            if (serviceFunctions.length <= 3 || isNodeExpanded) {
                // Show all functions if â‰¤3 total or if expanded
                visibleFunctions = serviceFunctions;
                hiddenFunctions = [];
            } else {
                // Show only first 2 functions when collapsed
                visibleFunctions = serviceFunctions.slice(0, 2);
                hiddenFunctions = serviceFunctions.slice(2);
            }

            // Create connections for visible functions
            visibleFunctions.forEach((func) => {
                func.connections?.forEach((connectionUuid) => {
                    const connectionNode = nodes.find((node) => node.getID() === connectionUuid);
                    if (connectionNode) {
                        const port = node.getFunctionPort(func);
                        if (port) {
                            const link = createPortNodeLink(port, connectionNode);
                            if (link) {
                                links.push(link);
                            }
                        }
                    }
                });
            });

            // Create connections for hidden functions to the view all resources port (only when collapsed)
            if (hiddenFunctions.length > 0 && !isNodeExpanded) {
                const viewAllPort = node.getViewAllResourcesPort();
                hiddenFunctions.forEach((func) => {
                    func.connections?.forEach((connectionUuid) => {
                        const connectionNode = nodes.find((node) => node.getID() === connectionUuid);
                        if (connectionNode && viewAllPort) {
                            const link = createPortNodeLink(viewAllPort, connectionNode);
                            if (link) {
                                links.push(link);
                            }
                        }
                    });
                });
            }
        });

        // create automation
        const automation = project.automation;
        if (automation) {
            const automationNode = new EntryNodeModel(automation, "automation");
            nodes.push(automationNode);
            // link connections
            automation.connections.forEach((connectionUuid) => {
                const connectionNode = nodes.find((node) => node.getID() === connectionUuid);
                if (connectionNode) {
                    const link = createNodesLink(automationNode, connectionNode);
                    if (link) {
                        links.push(link);
                    }
                }
            });
        }

        // create listeners
        project.listeners?.forEach((listener) => {
            const node = new ListenerNodeModel(listener);
            nodes.push(node);
            // link services
            listener.attachedServices.forEach((serviceUuid) => {
                const serviceNode = nodes.find((node) => node.getID() === serviceUuid);
                if (serviceNode) {
                    const link = createNodesLink(node, serviceNode);
                    if (link) {
                        links.push(link);
                    }
                }
            });
        });

        return { nodes, links };
    };

    const drawDiagram = (nodes: NodeModel[], links: NodeLinkModel[]) => {
        const newDiagramModel = new DiagramModel();
        newDiagramModel.addLayer(new OverlayLayerModel());
        // add nodes and links to the diagram
        newDiagramModel.addAll(...nodes, ...links);

        diagramEngine.setModel(newDiagramModel);
        setDiagramModel(newDiagramModel);
        // registerListeners(diagramEngine);

        diagramEngine.setModel(newDiagramModel);

        // diagram paint with timeout
        setTimeout(() => {
            // remove loader overlay layer
            const overlayLayer = diagramEngine
                .getModel()
                .getLayers()
                .find((layer) => layer instanceof OverlayLayerModel);
            if (overlayLayer) {
                diagramEngine.getModel().removeLayer(overlayLayer);
            }
            if (diagramEngine?.getCanvas()?.getBoundingClientRect) {
                diagramEngine.zoomToFitNodes({ margin: 40, maxZoom: 1 });
            }
            diagramEngine.repaintCanvas();
        }, 200);
    };

    const context: DiagramContextState = {
        project,
        expandedNodes,
        onListenerSelect,
        onServiceSelect,
        onFunctionSelect,
        onAutomationSelect,
        onConnectionSelect,
        onDeleteComponent,
        onToggleNodeExpansion: handleToggleNodeExpansion,
    };

    return (
        <>
            <Controls engine={diagramEngine} />

            {diagramEngine && diagramModel && (
                <DiagramContextProvider value={context}>
                    <DiagramCanvas>
                        <CanvasWidget engine={diagramEngine} />
                    </DiagramCanvas>
                </DiagramContextProvider>
            )}
        </>
    );
}
